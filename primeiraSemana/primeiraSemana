{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.1"
    },
    "colab": {
      "name": "Primeira_Semana.ipynb",
      "provenance": []
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "fklJ9UoDbqRe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a6de3cb2-3e8a-45d2-ac1b-724e06de15ca"
      },
      "source": [
        "import tensorflow as tf\n",
        "print(tf.__version__)"
      ],
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2.5.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EzFHbd50bqRm"
      },
      "source": [
        "# The Sequential model API"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QwuVxAPabqRn"
      },
      "source": [
        " ## Coding tutorials\n",
        " #### [1. Building a Sequential model](#coding_tutorial_1)\n",
        " #### [2. Convolutional and pooling layers](#coding_tutorial_2)\n",
        " #### [3. The compile method](#coding_tutorial_3)\n",
        " #### [4. The fit method](#coding_tutorial_4)\n",
        " #### [5. The evaluate and predict methods](#coding_tutorial_5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fMogvuxNbqRp"
      },
      "source": [
        "***\n",
        "<a id=\"coding_tutorial_1\"></a>\n",
        "## Building a Sequential model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8zUR-J5ybqRq"
      },
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Flatten, Softmax"
      ],
      "execution_count": 135,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q8Bfxr3AbqRr"
      },
      "source": [
        "#### Build a feedforward neural network model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y6y5tMYabqRs"
      },
      "source": [
        "# Build the Sequential feedforward neural network model\n",
        "\n",
        "model = Sequential([       \n",
        "     Flatten(input_shape = (28,28)),\n",
        "     Dense(16, activation='relu'),\n",
        "     Dense(16, activation='relu'),\n",
        "     #Dense(10, activation='softmax')\n",
        "     Dense(10),\n",
        "     Softmax()\n",
        "])"
      ],
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OrKv-D9VbqRt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0097ecc3-ef3b-4806-e23c-f2d0e570b895"
      },
      "source": [
        "# Print the model summary\n",
        "\n",
        "model.summary()"
      ],
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_13\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "flatten_13 (Flatten)         (None, 784)               0         \n",
            "_________________________________________________________________\n",
            "dense_25 (Dense)             (None, 16)                12560     \n",
            "_________________________________________________________________\n",
            "dense_26 (Dense)             (None, 16)                272       \n",
            "_________________________________________________________________\n",
            "dense_27 (Dense)             (None, 10)                170       \n",
            "_________________________________________________________________\n",
            "softmax_6 (Softmax)          (None, 10)                0         \n",
            "=================================================================\n",
            "Total params: 13,002\n",
            "Trainable params: 13,002\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9F-UUpS0bqRv"
      },
      "source": [
        "***\n",
        "<a id=\"coding_tutorial_2\"></a>\n",
        "## Convolutional and pooling layers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X2Fg-QTKbqRw"
      },
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D"
      ],
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VH6_CMX8bqRy"
      },
      "source": [
        "#### Build a convolutional neural network model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d8mryWkVbqRz"
      },
      "source": [
        "# Build the Sequential convolutional neural network model\n",
        "\n",
        "#padding -> SAME, VALID\n",
        "#strides -> a quantidade de pixels utilizadas para saltar\n",
        "#data_format -> utilizado para modificar a a forma da saida : channels_first, channels_last\n",
        "\n",
        "\n",
        "model = Sequential([\n",
        "    #Conv2D(channels_out, (kernel_size,kernel_size), activation, input_shape = (weight, height, channels))\n",
        "    Conv2D(16, (3,3), activation = 'relu', input_shape = (28,28,1)),\n",
        "    #MaxPooling2D((pooling_size, pooling_size), data_format)\n",
        "    MaxPooling2D((3,3)),\n",
        "    #Flatten() ou Flatten((dim1, dim2)) -> produz um vetor unidimensional\n",
        "    Flatten(),\n",
        "    #Dense(unidades_neurônios, ativação)\n",
        "    Dense(10, activation='softmax')\n",
        "])\n"
      ],
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YWRDuzlYbqR1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ab80e625-89f0-40d3-8885-76c0a2cc12d2"
      },
      "source": [
        "# Print the model summary\n",
        "model.summary()\n"
      ],
      "execution_count": 140,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_14\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_7 (Conv2D)            (None, 26, 26, 16)        160       \n",
            "_________________________________________________________________\n",
            "max_pooling2d_7 (MaxPooling2 (None, 8, 8, 16)          0         \n",
            "_________________________________________________________________\n",
            "flatten_14 (Flatten)         (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "dense_28 (Dense)             (None, 10)                10250     \n",
            "=================================================================\n",
            "Total params: 10,410\n",
            "Trainable params: 10,410\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PNNy10dobqR1"
      },
      "source": [
        "***\n",
        "<a id=\"coding_tutorial_3\"></a>\n",
        "## The compile method"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mCfxB_m1bqR2"
      },
      "source": [
        "#### Compile the model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "If8rUuzHbqR3"
      },
      "source": [
        "# Define the model optimizer, loss function and metrics\n",
        "\n",
        "#valores customizados para opt, loss, e metrics é necessário\n",
        "#instanciar um objeto e passar o valor desejado no construtor\n",
        "                                #valor customizado para os atributos do optimizer\n",
        "#loss = tf.keras.losses.SparseCategoricalCrossentropy()                             #passar valores custimizados para a função de perda\n",
        "#metrics = [tf.keras.metrics.Accuracy(), tf.keras.metrics.MeanAbsoluteError()]      #passar valores customizados para as métricas\n",
        "\n",
        "opt = tf.keras.optimizers.Adam(learning_rate=0.005)\n",
        "\n",
        "model.compile(optimizer = opt,\n",
        "             loss = 'sparse_categorical_crossentropy',\n",
        "             metrics = ['sparse_categorical_accuracy','mae'])\n"
      ],
      "execution_count": 141,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1sbtzDdxbqR4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d75224f5-812c-476e-ea26-88d1275aff7a"
      },
      "source": [
        "# Print the resulting model attributes\n",
        "print(model.loss)\n",
        "print(model.optimizer)\n",
        "print(model.metrics)"
      ],
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "sparse_categorical_crossentropy\n",
            "<tensorflow.python.keras.optimizer_v2.adam.Adam object at 0x7fb9b6b59190>\n",
            "[]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WNAkCJ6sbqR5"
      },
      "source": [
        "***\n",
        "<a id=\"coding_tutorial_4\"></a>\n",
        "## The fit method"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "94h7VosJbqR6"
      },
      "source": [
        "from tensorflow.keras.preprocessing import image\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "execution_count": 143,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bbDqJim0bqR7"
      },
      "source": [
        "#### Load the data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZxB4InmSbqR8"
      },
      "source": [
        "# Load the Fashion-MNIST dataset\n",
        "\n",
        "fashion_mnist_data = tf.keras.datasets.fashion_mnist\n",
        "(train_images, train_labels), (test_images, test_labels) = fashion_mnist_data.load_data()"
      ],
      "execution_count": 144,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dw-jjEcYbqR9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42b01776-e76d-4ece-ca90-4080ed0be83b"
      },
      "source": [
        "# Print the shape of the training data\n",
        "\n",
        "train_images.shape"
      ],
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 28, 28)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BvntDMEIbqR9"
      },
      "source": [
        "# Define the labels\n",
        "\n",
        "labels = [\n",
        "    'T-shirt/top',\n",
        "    'Trouser',\n",
        "    'Pullover',\n",
        "    'Dress',\n",
        "    'Coat',\n",
        "    'Sandal',\n",
        "    'Shirt',\n",
        "    'Sneaker',\n",
        "    'Bag',\n",
        "    'Ankle boot'\n",
        "]"
      ],
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d-QWX9nzbqR-"
      },
      "source": [
        "# Rescale the image values so that they lie in between 0 and 1.\n",
        "\n",
        "train_images = train_images / 255.0"
      ],
      "execution_count": 147,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "simEUcVDbqR_",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "939a367e-dc3f-484c-dbae-084c5b9e0ba3"
      },
      "source": [
        "# Display one of the images\n",
        "\n",
        "i = 20\n",
        "plt.imshow(train_images[i, :,:])\n",
        "plt.show()\n",
        "print(labels[train_labels[i]])\n"
      ],
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Dress\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bgUcm5rqbqSA"
      },
      "source": [
        "#### Fit the model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DV_6hWp-bqSB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0d0d1a6b-42bc-49b4-ebc4-399ecdf6d210"
      },
      "source": [
        "# Fit the model\n",
        "\n",
        "history = model.fit(train_images.reshape(-1,28,28,1), train_labels, epochs=10, batch_size=256)"
      ],
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.5602 - sparse_categorical_accuracy: 0.8049 - mae: 4.4200\n",
            "Epoch 2/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.3606 - sparse_categorical_accuracy: 0.8728 - mae: 4.4200\n",
            "Epoch 3/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.3268 - sparse_categorical_accuracy: 0.8841 - mae: 4.4200\n",
            "Epoch 4/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.3112 - sparse_categorical_accuracy: 0.8891 - mae: 4.4200\n",
            "Epoch 5/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.2993 - sparse_categorical_accuracy: 0.8924 - mae: 4.4200\n",
            "Epoch 6/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.2925 - sparse_categorical_accuracy: 0.8946 - mae: 4.4200\n",
            "Epoch 7/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.2819 - sparse_categorical_accuracy: 0.8978 - mae: 4.4200\n",
            "Epoch 8/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.2765 - sparse_categorical_accuracy: 0.9005 - mae: 4.4200\n",
            "Epoch 9/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.2704 - sparse_categorical_accuracy: 0.9017 - mae: 4.4200\n",
            "Epoch 10/10\n",
            "235/235 [==============================] - 1s 4ms/step - loss: 0.2666 - sparse_categorical_accuracy: 0.9034 - mae: 4.4200\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DfJaf3spbqSB"
      },
      "source": [
        "#### Plot training history"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6mUFI66BbqSC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "outputId": "1afd7508-68e4-4273-9160-e34eb312affc"
      },
      "source": [
        "# Load the history into a pandas Dataframe\n",
        "\n",
        "df = pd.DataFrame(history.history)\n",
        "df.tail(10)"
      ],
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>loss</th>\n",
              "      <th>sparse_categorical_accuracy</th>\n",
              "      <th>mae</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.560185</td>\n",
              "      <td>0.804950</td>\n",
              "      <td>4.420001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.360572</td>\n",
              "      <td>0.872783</td>\n",
              "      <td>4.420000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.326778</td>\n",
              "      <td>0.884067</td>\n",
              "      <td>4.420000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.311186</td>\n",
              "      <td>0.889100</td>\n",
              "      <td>4.420000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.299280</td>\n",
              "      <td>0.892450</td>\n",
              "      <td>4.419999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.292507</td>\n",
              "      <td>0.894583</td>\n",
              "      <td>4.420002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.281896</td>\n",
              "      <td>0.897800</td>\n",
              "      <td>4.420000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.276527</td>\n",
              "      <td>0.900483</td>\n",
              "      <td>4.420000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.270354</td>\n",
              "      <td>0.901717</td>\n",
              "      <td>4.420000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.266559</td>\n",
              "      <td>0.903433</td>\n",
              "      <td>4.420001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       loss  sparse_categorical_accuracy       mae\n",
              "0  0.560185                     0.804950  4.420001\n",
              "1  0.360572                     0.872783  4.420000\n",
              "2  0.326778                     0.884067  4.420000\n",
              "3  0.311186                     0.889100  4.420000\n",
              "4  0.299280                     0.892450  4.419999\n",
              "5  0.292507                     0.894583  4.420002\n",
              "6  0.281896                     0.897800  4.420000\n",
              "7  0.276527                     0.900483  4.420000\n",
              "8  0.270354                     0.901717  4.420000\n",
              "9  0.266559                     0.903433  4.420001"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vMWO0raPbqSC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "outputId": "d85dc134-263b-4dd9-99bb-18cf416111c3"
      },
      "source": [
        "# Make a plot for the loss\n",
        "\n",
        "df.plot(y='loss', title = \"loss vs epochs\", legend = False)\n",
        "plt.show()\n"
      ],
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eY_u0LW2bqSD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "outputId": "70114bea-a660-48e4-83f7-7875c46cdc16"
      },
      "source": [
        "# Make a plot for the accuracy\n",
        "df.plot(y='sparse_categorical_accuracy', title = 'acc vs epochs', legend = False)\n",
        "plt.show()"
      ],
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MM86DGWIbqSD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "outputId": "ba40ac28-5627-4266-9d16-9a939de891a7"
      },
      "source": [
        "# Make a plot for the additional metric\n",
        "df.plot(y='mae', title = 'mae vs epochs', legend = False)\n",
        "plt.show()\n"
      ],
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "viuOoGgjbqSE"
      },
      "source": [
        "***\n",
        "<a id=\"coding_tutorial_5\"></a>\n",
        "## The evaluate and predict methods"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ImgkjmOGbqSF"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np"
      ],
      "execution_count": 155,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wUCMuOVxbqSF"
      },
      "source": [
        "#### Evaluate the model on the test set"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3CCtwrz_bqSG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "50454c4d-149e-469b-f636-6eccaae5878f"
      },
      "source": [
        "# Evaluate the model\n",
        "\n",
        "model.evaluate(test_images.reshape(-1,28,28,1), test_labels)"
      ],
      "execution_count": 157,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 1s 2ms/step - loss: 71.4912 - sparse_categorical_accuracy: 0.8160 - mae: 4.4200\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[71.49116516113281, 0.8159999847412109, 4.419997215270996]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 157
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-XhcvsDcbqSG"
      },
      "source": [
        "#### Make predictions from the model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gUehmgQqbqSH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "dd31054c-ec41-4692-b71d-1757f40ce9a6"
      },
      "source": [
        "# Choose a random test image\n",
        "\n",
        "random_inx = np.random.choice(test_images.shape[0])\n",
        "\n",
        "test_image = test_images[random_inx]\n",
        "plt.imshow(test_image)\n",
        "plt.show()\n",
        "print(f\"Label: {labels[test_labels[random_inx]]}\")"
      ],
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Label: Sneaker\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uadE2QnhbqSH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "d0af40ee-ebf0-443c-ebbf-1f90404baf62"
      },
      "source": [
        "# Get the model predictions\n",
        "\n",
        "pred = model.predict(test_image.reshape(1,28,28,1))\n",
        "labels[np.argmax(pred, axis = 1)[0]]"
      ],
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Sneaker'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 170
        }
      ]
    }
  ]
}